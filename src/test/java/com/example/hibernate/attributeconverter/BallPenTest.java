package com.example.hibernate.attributeconverter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;

import java.awt.Color;
import java.util.List;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import com.example.hibernate.model.identity.hibernate.BaseTest;
import static org.hamcrest.Matchers.*;


@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class BallPenTest extends BaseTest {

	private static Long pk = null;

	@Test
	public void aPersistTest() {
		BallPen ballPen = new BallPen();
		ballPen.setColor(new Color(23, 32, 31));
		em.persist(ballPen);

		pk = ballPen.getId();
	}

	@Test
	public void bFindAfterPersistTest() {
		BallPen ballPen = em.find(BallPen.class, pk);

		assertNotNull(ballPen);
		assertEquals(23, ballPen.getColor().getRed());
		assertEquals(32, ballPen.getColor().getGreen());
		assertEquals(31, ballPen.getColor().getBlue());
	}

	@Test
	public void cMergeTest() {
		BallPen ballPen = em.find(BallPen.class, pk);
		assertNotNull(ballPen);
		ballPen.setColor(new Color(50, 50, 50));
		em.merge(ballPen);

		em.flush();
		em.refresh(ballPen);
		assertNotNull(ballPen);
		assertEquals(50, ballPen.getColor().getRed());
		assertEquals(50, ballPen.getColor().getGreen());
		assertEquals(50, ballPen.getColor().getBlue());
	}

	@Test
	public void eFindByJPQLQueryTest() {
		BallPen ballPen = em.createQuery("SELECT p FROM BallPen p WHERE p.id = :penId", BallPen.class)
				.setParameter("penId", pk).getSingleResult();
		assertNotNull(ballPen);
		assertEquals(50, ballPen.getColor().getRed());
		assertEquals(50, ballPen.getColor().getGreen());
		assertEquals(50, ballPen.getColor().getBlue());
	}

	@Test
	public void fFindByJPQLQueryWithConstructorExpressionTest() {
		BallPen ballPen = em.createQuery(
				"SELECT NEW com.example.hibernate.attributeconverter.BallPen(p.id, p.color) FROM BallPen p WHERE p.id = :penId",
				BallPen.class).setParameter("penId", pk).getSingleResult();
		assertNotNull(ballPen);
		System.out.println("is managed instance :: " + em.contains(ballPen));
		assertEquals(50, ballPen.getColor().getRed());
		assertEquals(50, ballPen.getColor().getGreen());
		assertEquals(50, ballPen.getColor().getBlue());
	}
	
	@Test
	public void gFindByJPQLQueryWitReportQueryTest() {
		Color color = em.createQuery(
				"SELECT p.color FROM BallPen p WHERE p.id = :penId",
				Color.class).setParameter("penId", pk).getSingleResult();
		assertNotNull(color);
		assertEquals(50, color.getRed());
		assertEquals(50, color.getGreen());
		assertEquals(50, color.getBlue());
	}
	
	@Test
	public void hJPQLWhereClauseTest() {
		List<Long> pendIds = em.createQuery(
				"SELECT p.id FROM BallPen p WHERE p.color = :color",
				Long.class).setParameter("color", new Color(50, 50, 50)).getResultList();
		assertNotNull(pendIds);
		assertThat(pendIds, hasItem(pk));
	}
	
	@Test
	public void iGroupByJPQLTest() {
		
		List<Object[]> colorWisePenCount = em.createQuery("SELECT p.color, COUNT(p.id) FROM BallPen p GROUP BY p.color").getResultList();
		assertNotNull(colorWisePenCount);
		
		colorWisePenCount.stream().forEach(tuple -> {
			Color color = (Color) tuple[0];
			Long count = (Long) tuple[1];
			System.out.println(color + " : " + count);
		});
	}
}
